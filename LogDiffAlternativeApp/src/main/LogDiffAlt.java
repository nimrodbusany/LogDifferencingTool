package main;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import logs.AlgorithmsTimer;

import org.apache.commons.io.FileUtils;
import org.jgrapht.ext.ExportException;

import prefuse.data.io.DataIOException;
import synopticdiff.main.parser.ParseException;
import synopticdiff.util.InternalSynopticException;
import DiffRunners.AutomatonSubtractionDiffRunner;
import DiffRunners.KSeqBasedDiffRunner;
import DiffRunners.KTDiffRunner;
import DiffRunners.SimpleKTails;
import GraphUtils.GraphConverter;

import com.alexmerz.graphviz.objects.Graph;

import exporters.GraphExporter;

public class LogDiffAlt {

	final static boolean SKIP_INITIAL_TERMINAL_NODES = true; // if True Terminal
																// and Initial
																// Dummy labels
																// are removed
	final static boolean OUTPUT_ORIGINAL_MODELS = true; // outputs the models
														// generated by
														// the original kTails
														// and kTdiff models
														// with labels over
														// nodes

	// private final static int kParam = 2;
	private int k = 2;

	final boolean WRAPWORDS = true;
	AlgorithmsTimer ktailsTimer = new AlgorithmsTimer();
	AlgorithmsTimer ktdiffTimer = new AlgorithmsTimer();
	private boolean kSeqApproach = true;
	
	KTDiffRunner ktdiffRunner = new KTDiffRunner();


	public LogDiffAlt(int kparam, boolean kSeqApproach) {
		this.k = kparam;
		this.kSeqApproach = kSeqApproach;
	}

	public AlgorithmsTimer getTimeKTails() {
		return ktailsTimer;
	}

	public AlgorithmsTimer getTimeKTDiff() {
		return ktdiffTimer;
	}

	public static void main(String[] args) throws IOException, DataIOException,
			InternalSynopticException, ParseException, ExportException {

		LogDiffAlt l = new LogDiffAlt(2, true);
		l.run("C:/Users/user/log_diff_projects/LogDiffAlternativeApp/resources/logs/Test/");

	}

	public void run(String baseDir) throws FileNotFoundException, IOException,
			ParseException, DataIOException, ExportException {

		createDir(baseDir + "Output_kTails/");
		createDir(baseDir + "Output_kTDiff/");

		ktailsTimer.run();
		diffUsingKTails(baseDir, "Output_kTails/", this.kSeqApproach, this.k,
				true);
		ktailsTimer.stop();

		ktdiffTimer.run();
		diffWithKTDiff(baseDir, "Output_kTDiff/", this.k);
		ktdiffTimer.stop();
	}
	
	public Set<String> runKtailsOnly(String baseDir) throws FileNotFoundException, IOException, ParseException, DataIOException, ExportException 	
	{
		createDir(baseDir + "Output_kTtails/");

		return diffUsingKTails(baseDir, "Output_kTtails/", this.kSeqApproach, this.k, true);
	}
	
	public void runKtDiffOnly(String baseDir) throws FileNotFoundException, IOException,
				ParseException, DataIOException, ExportException 
	{
		createDir(baseDir + "Output_kTDiff/");
		
		ktdiffTimer.run();
		diffWithKTDiff(baseDir, "Output_kTDiff/", this.k);
		ktdiffTimer.stop();
	}
	
	private void createDir(String outDirKTails) {
		File dir = new File(outDirKTails);
		dir.mkdir();

		try {
			FileUtils.cleanDirectory(dir);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String diffWithKTDiff(String baseDir, String outDirKTDiff, int kParam)
			throws IOException, ExportException {

		String kTDiff_output_file = baseDir + outDirKTDiff
				+ "/kTDiff_model.dot";
		String out_fsa2 = baseDir + outDirKTDiff + "kdiff.dot";
		
		Graph graph = ktdiffRunner.runDiffKtails(kParam, baseDir,
				kTDiff_output_file, outDirKTDiff);

		//Graph converted = GraphConverter.convertGraphFromLabelOnNodesToEdges(
		//		graph, out_fsa2, true, SKIP_INITIAL_TERMINAL_NODES, true);
		
		return "";// GraphExporter.exportGraph(out_fsa2, converted);
	}

	public Set<String> diffUsingKTails(String baseDir, String outDirKTails,
			boolean KSeqApproachApproach, int kParam, boolean determinize)
			throws IOException, ParseException, FileNotFoundException,
			DataIOException, InternalSynopticException, ExportException {

		HashMap<Integer, String> graphid2filename = new HashMap<Integer, String>();
		ArrayList<String> logfilePaths = new ArrayList<String>();
		ArrayList<Graph> graphs = new ArrayList<Graph>();
		File[] filesList = new File(baseDir).listFiles();
		Arrays.sort(filesList);
		Integer graph_id = 0;
		int numberOfLogs = 0;

		// RUN KTAILS OVER EACH LOG FILE
		for (File file : filesList) {

			if (!file.toString().endsWith("log")) {
				continue;
			}
			logfilePaths.add(file.getAbsolutePath());
			String fname = file.getName().substring(0,
					file.getName().lastIndexOf("."));
			Graph g = runKTailsOverLogFile(file, baseDir, baseDir
					+ outDirKTails, graph_id);
			graphs.add(g);
			graphid2filename.put(graph_id, fname);
			graph_id += 1;
			numberOfLogs++;

		}

		ktailsTimer.averageLogSize = ktailsTimer.logSize / numberOfLogs;
		ktailsTimer.averageTraceSize = ktailsTimer.traceSize
				/ ktailsTimer.logSize;

		HashMap<String, Graph> diffs = null;
		
		// PREFROM DIFF
		if (KSeqApproachApproach) {
			KSeqBasedDiffRunner runner = new KSeqBasedDiffRunner(k,WRAPWORDS);
			diffs = runner.perfomKTailsDiffKSeqApproach(baseDir + outDirKTails, logfilePaths,
					graphs);
		} else {
		    AutomatonSubtractionDiffRunner runner = new AutomatonSubtractionDiffRunner(WRAPWORDS);
			diffs = runner.perfomKTailsDiff(baseDir + outDirKTails, determinize,
					graphid2filename, graphs);
		}
		
		Set<String> resultString = new HashSet<String>();
		
		// OUTPUT RESULTS
		for (String diff : diffs.keySet()) {
			String output_file = baseDir + outDirKTails + "/diff_" + diff
					+ ".dot";
			resultString.add(GraphExporter.exportGraph(output_file, diffs.get(diff)));
			String fullPathName = baseDir + File.separator + outDirKTails + File.separator + diff + ".log";
			resultString.add(fullPathName);
		}
		
		return resultString;
	}

	
	private Graph runKTailsOverLogFile(File file, String baseDir,
			String outDirKTails, Integer graph_id) throws IOException,
			InternalSynopticException, ParseException, ExportException {

		SimpleKTails sm = new SimpleKTails();
		String fname = file.getName();
		fname = fname.substring(0, fname.lastIndexOf("."));
		String ktails_output_file_log = outDirKTails + fname + "orig.dot";
		// ktailsTimer.run();

		Graph graph = sm.runKTails(this.k, file.getAbsolutePath(),
				ktails_output_file_log, baseDir);

		// ktailsTimer.stop();

		ktailsTimer.traceSize += sm.tracesSize;
		ktailsTimer.logSize += sm.numOfTraces;

		String out_fsa = outDirKTails + fname + "_ktails.dot";
		if (OUTPUT_ORIGINAL_MODELS) {
			synopticdiff.model.export.GraphExporter
					.generatePngFileFromDotFile(ktails_output_file_log);
		}
		Graph convereted = GraphConverter.convertGraphFromLabelOnNodesToEdges(
				graph, out_fsa, false, SKIP_INITIAL_TERMINAL_NODES, false);
		GraphExporter.exportGraph(out_fsa, convereted);
		return convereted;

	}

}
